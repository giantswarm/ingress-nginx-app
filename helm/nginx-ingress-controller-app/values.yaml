# Default values for the nginx-ingress-controller-app.
# You can set some of these values by supplying your own values when creating
# your app. See https://docs.giantswarm.io/reference/app-configuration/

# -----------------------------------------------------------------------------#

# DO NOT copy this entire file and use it as your values file. This will impede
# upgrading and our own ability to correct issues with the base configuration.

# -----------------------------------------------------------------------------#

# configmap
# These values get applied directly to a configmap which configures the
# nginx-ingress-controller
# For all the nginx configmap config options see:
# https://github.com/kubernetes/ingress-nginx/blob/main/docs/user-guide/nginx-configuration/configmap.md#configmaps
configmap:

  # configmap.error-log-level
  # Configures the logging level of errors.
  # Valid values: debug, info, notice, warn, error, crit, alert, or emerg
  # References: http://nginx.org/en/docs/ngx_core_module.html#error_log
  error-log-level: "notice"

  # configmap.hsts
  # Enables or disables the HTTP Strict Transport Security (HSTS) header in
  # servers running SSL.
  # See https://github.com/kubernetes/ingress-nginx/issues/549#issuecomment-291894246
  hsts: "false"

  # configmap.server-name-hash-bucket-size
  # Sets the size of the bucket for the server names hash tables.
  # Increase hash table size to allow more server names for stability reasons
  server-name-hash-bucket-size: "1024"

  # configmap.worker-processes
  # Sets the number of worker processes.
  worker-processes: "4"

  # configmap.worker-shutdown-timeout
  # Maximum amount of time NGINX worker processes should give active connections to drain.
  # This should not be higher than controller.terminationGracePeriodSeconds
  worker-shutdown-timeout: "240s"

  # configmap.use-forwarded-headers
  # If true, NGINX passes the incoming X-Forwarded-* headers to upstreams.
  use-forwarded-headers: "false"

# controller
# Contains mostly configuration values that get applied to the kubernetes
# resources that make up the ingress controller.
controller:

  # controller.replicaCount
  # Number of initial NGINX IC Deployment replicas.
  replicaCount: 2

  # controller.antiAffinityScheduling
  # Configures podAntiAffinity scheduling strategy.
  # Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity
  antiAffinityScheduling: preferredDuringSchedulingIgnoredDuringExecution

  # controller.nodeAffinity
  # Allows to set nodeAffinity scheduling configuration.
  # Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity
  nodeAffinity:
  #  requiredDuringSchedulingIgnoredDuringExecution:
  #    nodeSelectorTerms:
  #    - matchExpressions:
  #      - key: giantswarm.io/machine-deployment
  #        operator: In
  #        values:
  #        - ab123

  # controller.topologySpreadConstraints
  # Topology spread constraints for pod assignment (requires Kubernetes >= 1.19)
  # Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
  # Important: We strongly suggest you review these settings before applying onto your clusters.
  # This document https://docs.giantswarm.io/advanced/high-availability/multi-az/ gives more insight.
  topologySpreadConstraints: |-
    - labelSelector:
        matchLabels:
          app.kubernetes.io/name: {{ include "name" . | quote }}
          app.kubernetes.io/instance: {{ .Release.Name | quote }}
          app.kubernetes.io/component: controller
      topologyKey: topology.kubernetes.io/zone
      maxSkew: 1
      whenUnsatisfiable: ScheduleAnyway
    - labelSelector:
        matchLabels:
          app.kubernetes.io/name: {{ include "name" . | quote }}
          app.kubernetes.io/instance: {{ .Release.Name | quote }}
          app.kubernetes.io/component: controller
      topologyKey: kubernetes.io/hostname
      maxSkew: 1
      whenUnsatisfiable: ScheduleAnyway

  # controller.maxSurge
  # Configures maximum number of replicas that can be created over
  # the desired number of Pods.
  maxSurge: 1

  # -- Define either 'minAvailable' or 'maxUnavailable', never both.
  # minAvailable: 1
  # -- Define either 'minAvailable' or 'maxUnavailable', never both.
  maxUnavailable: 1

  # -- Use a `DaemonSet` or `Deployment`
  kind: Deployment

  # -- Labels to be added to the controller Deployment or DaemonSet and other resources that do not have option to specify labels
  ##
  labels: {}
  #  keel.sh/policy: patch
  #  keel.sh/trigger: poll

  # controller.minReadySeconds
  # minReadySeconds to avoid killing pods before we are ready
  # Configures the minimum amount of time that a replica has to be
  # ready before a rolling upgrade can proceed with the next replica.
  minReadySeconds: 0

  # controller.enableSSLChainCompletion
  # Autocomplete SSL certificate chains with missing intermediate CA certificates.
  # Certificates uploaded to Kubernetes must have the "Authority Information Access" X.509 v3 extension for this to succeed.
  enableSSLChainCompletion: false

  # controller.image
  image:
    ## Keep false as default for now!
    chroot: false

    # controller.image.repository
    repository: giantswarm/ingress-nginx-controller

    # controller.image.tag
    # When updating tag make sure to also keep appVersion in Chart.yaml in sync
    tag: v1.4.0

  # -- Use an existing PSP instead of creating one
  existingPsp: ""

  # -- Configures the ports that the nginx-controller listens on
  containerPort:
    http: 80
    https: 443

  # controller.livenessProbe
  # Liveness probe configuration
  # Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
  livenessProbe:
    enabled: true
    failureThreshold: 30
    initialDelaySeconds: 10
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5

  # controller.readinessProbe
  # Readiness probe configuration
  # Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
  readinessProbe:
    enabled: true
    failureThreshold: 3
    initialDelaySeconds: 10
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1

  # controller.startupProbe
  # Startup probe configuration
  # Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
  startupProbe:
    enabled: false
    failureThreshold: 3
    initialDelaySeconds: 10
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1

  metrics:
    port: 10254
    portName: metrics
    # if this port is changed, change healthz-port: in extraArgs: accordingly
    enabled: true

    service:
      annotations: {}
      # prometheus.io/scrape: "true"
      # prometheus.io/port: "10254"
      # -- Labels to be added to the metrics service resource
      labels: {}

      # clusterIP: ""

      # -- List of IP addresses at which the stats-exporter service is available
      ## Ref: https://kubernetes.io/docs/user-guide/services/#external-ips
      ##
      externalIPs: []

      # loadBalancerIP: ""
      loadBalancerSourceRanges: []
      servicePort: 10254
      type: ClusterIP
      # externalTrafficPolicy: ""
      # nodePort: ""

  # controller.resources
  resources:

    # controller.resources.requests
    # These are default resource requests.
    requests:
      cpu: 500m
      memory: 600Mi

  # controller.terminationGracePeriodSeconds
  # The maximum amount of time NGINX Deployment replica is given to gracefully
  # terminate. This should not be lower than configmap.worker-shutdown-timeout.
  # The default value of 300 allows the draining of connections for up to
  # five minutes
  # for more info see https://github.com/kubernetes/ingress-nginx/pull/4487#issuecomment-525588554
  # and important note in https://github.com/kubernetes/ingress-nginx/releases/tag/nginx-0.26.0
  terminationGracePeriodSeconds: 300

  # controller.lifecycle
  # Configures NGINX controller container lifecycle hooks.
  lifecycle:
    # Enable graceful shutdowns and rolling updates with zero-downtime
    preStop:
      exec:
        command:
        - /wait-shutdown

  # Mutually exclusive with keda autoscaling
  autoscaling:
    enabled: true
    annotations: {}
    minReplicas: 2
    maxReplicas: 20
    targetCPUUtilizationPercentage: 50
    targetMemoryUtilizationPercentage: 80
    behavior: {}
      # scaleDown:
      #   stabilizationWindowSeconds: 300
      #   policies:
      #   - type: Pods
      #     value: 1
      #     periodSeconds: 180
      # scaleUp:
      #   stabilizationWindowSeconds: 300
      #   policies:
      #   - type: Pods
      #     value: 2
      #     periodSeconds: 60

  autoscalingTemplate: []
  # Custom or additional autoscaling metrics
  # ref: https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/#support-for-custom-metrics
  # - type: Pods
  #   pods:
  #     metric:
  #       name: nginx_ingress_controller_nginx_process_requests_total
  #     target:
  #       type: AverageValue
  #       averageValue: 10000m

  # Mutually exclusive with hpa autoscaling
  keda:
    apiVersion: "keda.sh/v1alpha1"
    ## apiVersion changes with keda 1.x vs 2.x
    ## 2.x = keda.sh/v1alpha1
    ## 1.x = keda.k8s.io/v1alpha1
    enabled: false
    minReplicas: 1
    maxReplicas: 11
    pollingInterval: 30
    cooldownPeriod: 300
    restoreToOriginalReplicaCount: false
    scaledObject:
      annotations: {}
      # Custom annotations for ScaledObject resource
      #  annotations:
      # key: value
    triggers: []
 #     - type: prometheus
 #       metadata:
 #         serverAddress: http://<prometheus-host>:9090
 #         metricName: http_requests_total
 #         threshold: '100'
 #         query: sum(rate(http_requests_total{deployment="my-deployment"}[2m]))

    behavior: {}
 #     scaleDown:
 #       stabilizationWindowSeconds: 300
 #       policies:
 #       - type: Pods
 #         value: 1
 #         periodSeconds: 180
 #     scaleUp:
 #       stabilizationWindowSeconds: 300
 #       policies:
 #       - type: Pods
 #         value: 2
 #         periodSeconds: 60

  # controller.annotationsPrefix
  # The value for the "--annotations-prefix" flag given to the nginx-ingress-controller
  # container.
  annotationsPrefix: nginx.ingress.kubernetes.io

  # controller.defaultSSLCertificate
  # The Secret referred to by this flag contains the default certificate to be
  # used when accessing the catch-all server. If this flag is not provided NGINX
  # will use a self-signed certificate.
  # Example value: "default/foo-tls".
  defaultSSLCertificate: ""

  # -- Process Ingress objects without ingressClass annotation/ingressClassName field
  # Overrides value for --watch-ingress-without-class flag of the controller binary
  # Defaults to false
  watchIngressWithoutClass: false

  # -- Process IngressClass per name (additionally as per spec.controller).
  ingressClassByName: false

  # -- Required for use with CNI based kubernetes installations (such as ones set up by kubeadm),
  # since CNI and hostport don't mix yet. Can be deprecated once https://github.com/kubernetes/kubernetes/issues/23920
  # is merged
  hostNetwork: false

  ## Use host ports 80 and 443
  ## Disabled by default
  hostPort:
    # -- Enable 'hostPort' or not
    enabled: false
    ports:
      # -- 'hostPort' http port
      http: 80
      # -- 'hostPort' https port
      https: 443

  # -- Election ID to use for status update, by default it uses the controller name combined with a suffix of 'leader'
  electionID: ""

  ## This section refers to the creation of the IngressClass resource
  ## IngressClass resources are supported since k8s >= 1.18 and required since k8s >= 1.19
  ingressClassResource:
    # -- Name of the ingressClass
    name: nginx
    # -- Is this ingressClass enabled or not
    enabled: true
    # -- Is this the default ingressClass for the cluster
    default: false
    # -- Controller-value of the controller that is processing this ingressClass
    controllerValue: "k8s.io/ingress-nginx"

    # -- Parameters is a link to a custom resource containing additional
    # configuration for the controller. This is optional if the controller
    # does not require extra parameters.
    parameters: {}

  # -- For backwards compatibility with ingress.class annotation, use ingressClass.
  # Algorithm is as follows, first ingressClassName is considered, if not present, controller looks for ingress.class annotation
  ingressClass: nginx

  # -- See https://kubernetes.io/docs/tasks/administer-cluster/sysctl-cluster/ for notes on enabling and using sysctls
  sysctls: {}
  # sysctls:
  #   "net.core.somaxconn": "8192"

  # Limit the scope of the controller to a specific namespace
  scope:
    # -- Enable 'scope' or not
    enabled: false
    # -- Namespace to limit the controller to; defaults to $(POD_NAMESPACE)
    namespace: ""
    # -- When scope.enabled == false, instead of watching all namespaces, we watching namespaces whose labels
    # only match with namespaceSelector. Format like foo=bar. Defaults to empty, means watching all namespaces.
    namespaceSelector: ""

  # controller.userID
  # The userID that the container will run as. 101 is the www-data user.
  userID: 101

  # controller.groupID
  # The groupID that the container will run as.
  groupID: 101

  # controller.service
  service:

    # controller.service.enabled
    # If true, create LoadBalancer Service. Dynamically calculated during cluster creation.
    # Do not overwrite this value.
    enabled: true

    # controller.service.suffix
    # Suffix to add to the LoadBalancer Service name. This is useful for
    # OpenStack where cloud controller creates and references LBs by the name
    # and the namespace of the Service.
    suffix: ""

    annotations: {}
    labels: {}

    # controller.externalDNS
    externalDNS:

      # controller.externalDNS.annotation
      # Assign an annotation to the controller's Service - this is used by external-dns to filter which resources it reconciles. Required for running multiple external-dns instances in a single cluster.
      annotation: "giantswarm.io/external-dns: managed"

      # controller.externalDNS.enabled
      # Indicates whether to set external-dns annotations on the LB service.
      enabled: true

    # controller.service.externalTrafficPolicy
    # Configures kube-proxy, denotes if this Service desires to have external traffic routed to node-local or cluster-wide endpoints
    #   Local - kube-proxy only proxies requests to local endpoints (does not forward traffic to other nodes), source IP preserved
    #   Cluster - kube-proxy proxies requests randomly across all endpoints (forwards traffic to other nodes if necessary), source IP NAT'd
    externalTrafficPolicy: "Local"

    # controller.service.public
    # Applies to clusters running on AWS or Azure.
    # Valid values: true for public, false for internal
    public: true

    # controller.service.subdomain
    # Applies to clusters running on AWS or Azure.
    # Configures external dns subdomain to be appeneded to base domain in definition of cloud load balancer's fully qualified hostname.
    subdomain: "ingress"

    # controller.service.type
    # Valid values: LoadBalancer, NodePort
    type: LoadBalancer

    # controller.service.loadBalancerSourceRanges
    # Configures the source IP address ranges which can connect to the service.
    # Keep in mind that some solutions need to access the service to work properly (e.g. cert-manager & Let's Encrypt).
    # By default any source IP address can connect to the service.
    loadBalancerSourceRanges: []

    ports:
      http: 80
      https: 443

    targetPorts:
      http: http
      https: https

    # type: NodePort
    nodePorts:
      http: 30010
      https: 30011

    # controller.service.internal
    # Configuration settings for `-internal` suffixed Service variant.
    # This second Service partially covers use case and need for multiple ingress controllers, providing separate IPs for public and internal traffic in single app.
    internal:

      # controller.service.internal.enabled
      enabled: false

      # controller.service.internal.suffix
      # Suffix to add to the LoadBalancer Service name. This is useful for
      # OpenStack where cloud controller creates and references LBs by the name
      # and the namespace of the Service.
      suffix: ""

      annotations: {}
      labels: {}

      # controller.service.internal.externalTrafficPolicy
      # Configures kube-proxy, denotes if this Service desires to have external traffic routed to node-local or cluster-wide endpoints
      #   Local - kube-proxy only proxies requests to local endpoints (does not forward traffic to other nodes), source IP preserved
      #   Cluster - kube-proxy proxies requests randomly across all endpoints (forwards traffic to other nodes if necessary), source IP NAT'd
      externalTrafficPolicy: "Local"

      # controller.service.internal.subdomain
      # Applies to clusters running on AWS or Azure.
      # Configures external dns subdomain to be appeneded to base domain in definition of cloud load balancer's fully qualified hostname.
      subdomain: "ingress-internal"

      # controller.service.internal.type
      type: LoadBalancer

      # controller.service.internal.loadBalancerSourceRanges
      # Configures the source IP address ranges which can connect to the service.
      # Keep in mind that some solutions need to access the service to work properly (e.g. cert-manager & Let's Encrypt).
      # By default any source IP address can connect to the service.
      loadBalancerSourceRanges: []

      ports:
        http: 80
        https: 443

      # type: NodePort
      nodePorts:
        http: 30012
        https: 30013

  admissionWebhooks:
    annotations: {}
    # ignore-check.kube-linter.io/no-read-only-rootfs: "This deployment needs write access to root filesystem".

    ## Additional annotations to the admission webhooks.
    ## These annotations will be added to the ValidatingWebhookConfiguration and
    ## the Jobs Spec of the admission webhooks.
    enabled: true
    # -- Additional environment variables to set
    extraEnvs: []
    # extraEnvs:
    #   - name: FOO
    #     valueFrom:
    #       secretKeyRef:
    #         key: FOO
    #         name: secret-resource
    # -- Admission Webhook failure policy to use
    failurePolicy: Fail
    # timeoutSeconds: 10
    port: 8443
    certificate: "/usr/local/certificates/cert"
    key: "/usr/local/certificates/key"
    namespaceSelector: {}
    objectSelector: {}
    # -- Labels to be added to admission webhooks
    labels: {}

    # -- Use an existing PSP instead of creating one
    existingPsp: ""
    networkPolicyEnabled: true

    service:
      annotations: {}
      # clusterIP: ""
      externalIPs: []
      # loadBalancerIP: ""
      loadBalancerSourceRanges: []
      servicePort: 443
      type: ClusterIP

    createSecretJob:
      securityContext:
        allowPrivilegeEscalation: false
      resources: {}
        # limits:
        #   cpu: 10m
        #   memory: 20Mi
        # requests:
        #   cpu: 10m
        #   memory: 20Mi

    patchWebhookJob:
      securityContext:
        allowPrivilegeEscalation: false
      resources: {}

    patch:
      enabled: true
      image:
        image: giantswarm/ingress-nginx-kube-webhook-certgen
        ## for backwards compatibility consider setting the full image url via the repository value below
        ## use *either* current default registry/image or repository format or installing chart by providing the values.yaml will fail
        ## repository:
        tag: v20220916-gd32f8c343
        digest: ""
        pullPolicy: IfNotPresent
      # -- Provide a priority class name to the webhook patching job
      ##
      priorityClassName: ""
      podAnnotations: {}
      nodeSelector:
        kubernetes.io/os: linux
      tolerations: []
      # -- Labels to be added to patch job resources
      labels: {}
      securityContext:
        runAsNonRoot: true
        runAsUser: 2000
        fsGroup: 2000

    # Use certmanager to generate webhook certs
    certManager:
      enabled: false
      # self-signed root certificate
      rootCert:
        duration: ""  # default to be 5y
      admissionCert:
        duration: ""  # default to be 1y
      # issuerRef:
      #   name: "issuer"
      #   kind: "ClusterIssuer"

  # controller.updateIngressStatus
  # Enables updating of the loadbalancer status of Ingress objects which this controller is reconciling. Unless you are
  # managing DNS for ingresses via an external method, this should always be left enabled.
  # Disabling updates of Ingress status allows two parallel NGINX IC deployments to reconcile the same Ingresses.
  updateIngressStatus: true

  # controller.enableMimalloc
  # Enables mimalloc as a drop-in replacement for malloc, reduces the memory utilization.
  # For additional options it provides see https://github.com/microsoft/mimalloc#environment-options
  enableMimalloc: true

  # controller.extraEnvs
  # Additional environment variables to set for the controller.
  extraEnvs: []
  # extraEnvs:
  #   - name: FOO
  #     valueFrom:
  #       secretKeyRef:
  #         key: FOO
  #         name: secret-resource

  # controller.extraAnnotations
  # Additional annotations to apply to the controller.
  extraAnnotations:

    # controller.extraAnnotations.deployment
    # Add annotations to the overall controller Deployment
    # (.metadata.annotations).
    deployment: []

    # controller.extraAnnotations.pod
    # Add annotations to the controller deployment pod spec
    # (.spec.template.metadata.annotations).
    pod: []

  # controller.disableExternalNameForwarding
  # Enable or disable forwarding to ExternalName Services through
  # --disable-svc-external-name flag
  disableExternalNameForwarding: true

  # This configuration defines if Ingress Controller should allow users to set
  # their own *-snippet annotations, otherwise this is forbidden / dropped
  # when users add those annotations.
  # Global snippets in ConfigMap are still respected
  allowSnippetAnnotations: false

# image
image:
  registry: quay.io

# initContainer
# TODO: Explain and determine if this is a user level config or not.
initContainer:
  name: sysctl
  image:
    repository: giantswarm/alpine
    tag: 3.15.5-giantswarm-sysctl
  userID: 1000
  groupID: 1000

## Default 404 backend
##
defaultBackend:
  ##
  enabled: false

  name: defaultbackend
  image:
    registry: quay.io
    image: giantswarm/defaultbackend
    ## for backwards compatibility consider setting the full image url via the repository value below
    ## use *either* current default registry/image or repository format or installing chart by providing the values.yaml will fail
    ## repository:
    tag: "1.5"
    pullPolicy: IfNotPresent
    # nobody user -> uid 65534
    runAsUser: 65534
    runAsNonRoot: true
    readOnlyRootFilesystem: true
    allowPrivilegeEscalation: false

  # -- Use an existing PSP instead of creating one
  existingPsp: ""

  extraArgs: {}

  serviceAccount:
    create: true
    name: ""
    automountServiceAccountToken: true
  # -- Additional environment variables to set for defaultBackend pods
  extraEnvs: []

  port: 8080

  ## Readiness and liveness probes for default backend
  ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/
  ##
  livenessProbe:
    failureThreshold: 3
    initialDelaySeconds: 30
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  readinessProbe:
    failureThreshold: 6
    initialDelaySeconds: 0
    periodSeconds: 5
    successThreshold: 1
    timeoutSeconds: 5

  # -- Node tolerations for server scheduling to nodes with taints
  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
  ##
  tolerations: []
  #  - key: "key"
  #    operator: "Equal|Exists"
  #    value: "value"
  #    effect: "NoSchedule|PreferNoSchedule|NoExecute(1.6 only)"

  affinity: {}

  # -- Security Context policies for controller pods
  # See https://kubernetes.io/docs/tasks/administer-cluster/sysctl-cluster/ for
  # notes on enabling and using sysctls
  ##
  podSecurityContext: {}

  # -- Security Context policies for controller main container.
  # See https://kubernetes.io/docs/tasks/administer-cluster/sysctl-cluster/ for
  # notes on enabling and using sysctls
  ##
  containerSecurityContext: {}

  # -- Labels to add to the pod container metadata
  podLabels: {}
  #  key: value

  # -- Node labels for default backend pod assignment
  ## Ref: https://kubernetes.io/docs/user-guide/node-selection/
  ##
  nodeSelector:
    kubernetes.io/os: linux

  # -- Annotations to be added to default backend pods
  ##
  podAnnotations: {}

  replicaCount: 1

  minAvailable: 1

  resources: {}
  # limits:
  #   cpu: 10m
  #   memory: 20Mi
  # requests:
  #   cpu: 10m
  #   memory: 20Mi

  extraVolumeMounts: []
  ## Additional volumeMounts to the default backend container.
  #  - name: copy-portal-skins
  #   mountPath: /var/lib/lemonldap-ng/portal/skins

  extraVolumes: []
  ## Additional volumes to the default backend pod.
  #  - name: copy-portal-skins
  #    emptyDir: {}

  autoscaling:
    annotations: {}
    enabled: false
    minReplicas: 1
    maxReplicas: 2
    targetCPUUtilizationPercentage: 50
    targetMemoryUtilizationPercentage: 50

  service:
    annotations: {}

    # clusterIP: ""

    # -- List of IP addresses at which the default backend service is available
    ## Ref: https://kubernetes.io/docs/user-guide/services/#external-ips
    ##
    externalIPs: []

    # loadBalancerIP: ""
    loadBalancerSourceRanges: []
    servicePort: 80
    type: ClusterIP

  priorityClassName: ""
  # -- Labels to be added to the default backend resources
  labels: {}

## Enable RBAC as per https://github.com/kubernetes/ingress-nginx/blob/main/docs/deploy/rbac.md and https://github.com/kubernetes/ingress-nginx/issues/266
rbac:
  create: true
  scope: false

## If true, create & use Pod Security Policy resources
## https://kubernetes.io/docs/concepts/policy/pod-security-policy/
podSecurityPolicy:
  enabled: true

serviceAccount:
  create: true
  name: ""
  automountServiceAccountToken: true
  # -- Annotations for the controller service account
  annotations: {}

# -- TCP service key-value pairs
## Ref: https://github.com/kubernetes/ingress-nginx/blob/main/docs/user-guide/exposing-tcp-udp-services.md
##
tcp: {}
#  8080: "default/example-tcp-svc:9000"

# -- UDP service key-value pairs
## Ref: https://github.com/kubernetes/ingress-nginx/blob/main/docs/user-guide/exposing-tcp-udp-services.md
##
udp: {}
#  53: "kube-system/kube-dns:53"

# Below are configuration values that you should not overwrite or set yourself.

# baseDomain
# The base domain for this ingress controller.
# This value is set automatically. Do not overwrite this value.
baseDomain:

# provider (aws|capa|azure|kvm)
# The provider that the cluster is running on.
# This value is set automatically. Do not overwrite this value.
provider: aws
