apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.controller.name }}
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ .Values.controller.name }}
    giantswarm.io/service-type: "managed"
    k8s-app: {{ .Values.controller.k8sAppLabel }}
  annotations:
    prometheus.io/port: '{{ .Values.controller.metrics.port }}'
    prometheus.io/scrape: 'true'
spec:
  {{- if and ( (not .Values.controller.autoscaling.enabled) (or (not (index .Values.configmap "hpa-enabled")) (ne (index .Values.configmap "hpa-enabled") "true") ) ) }}
  replicas: {{ .Values.controller.replicaCount }}
  {{- end}}
  selector:
    matchLabels:
      k8s-app: {{ .Values.controller.k8sAppLabel }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: {{ .Values.controller.maxUnavailable }}
  minReadySeconds: {{ .Values.controller.minReadySeconds }}
  template:
    metadata:
      labels:
        app: {{ .Values.controller.name }}
        giantswarm.io/service-type: "managed"
        k8s-app: {{ .Values.controller.k8sAppLabel }}
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ''
        cluster-autoscaler.kubernetes.io/safe-to-evict: 'true'
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - {{ .Values.controller.name }}
              topologyKey: kubernetes.io/hostname
      serviceAccountName: {{ .Values.controller.name }}
      priorityClassName: system-cluster-critical
      terminationGracePeriodSeconds: {{ .Values.controller.terminationGracePeriodSeconds }}
      securityContext:
        sysctls:
        - name: net.ipv4.ip_local_port_range
          value: "1024 65535"
      initContainers:
      # Overall performance improvements
      # See https://github.com/kubernetes/ingress-nginx/issues/1939
      - name: {{ .Values.initContainer.name }}
        command:
        - sh
        - -c
        - |
          set -o errexit ; set -o xtrace ; set -o nounset

          sudo sysctl -w net.core.somaxconn=32768
        image: "{{ .Values.image.registry }}/{{ .Values.initContainer.image.repository }}:{{ .Values.initContainer.image.tag }}"
        imagePullPolicy: IfNotPresent
        securityContext:
          privileged: true
          runAsUser: {{ .Values.initContainer.userID }}
          runAsGroup: {{ .Values.initContainer.groupID }}
      containers:
      - name: {{ .Values.controller.name }}
        image: "{{ .Values.image.registry }}/{{ .Values.controller.image.repository }}:{{ .Values.controller.image.tag }}"
        args:
        - /nginx-ingress-controller
        - --configmap=$(POD_NAMESPACE)/{{ .Values.controller.configmap.name }}
        {{- if index .Values.configmap "annotations-prefix" }}
        - --annotations-prefix={{ index .Values.configmap "annotations-prefix" }}
        {{- else if .Values.controller.annotationsPrefix }}
        - --annotations-prefix={{ .Values.controller.annotationsPrefix }}
        {{- end}}
        {{- if index .Values.configmap "default-ssl-certificate" }}
        - --default-ssl-certificate={{ index .Values.configmap "default-ssl-certificate" }}
        {{- else if .Values.controller.defaultSSLCertificate }}
        - --default-ssl-certificate={{ .Values.controller.defaultSSLCertificate }}
        {{- end}}
        - --enable-ssl-chain-completion=false
        {{- if index .Values.configmap "ingress-class" }}
        - --ingress-class={{ index .Values.configmap "ingress-class" }}
        {{- else if .Values.controller.ingressClass }}
        - --ingress-class={{ .Values.controller.ingressClass }}
        {{- end}}
        {{- if .Values.controller.service.enabled }}
        - --publish-service={{ .Release.Namespace }}/{{ .Values.controller.name }}
        {{- end }}
        securityContext:
          allowPrivilegeEscalation: true
          capabilities:
            drop:
              - ALL
            add:
              - NET_BIND_SERVICE
          runAsUser: {{ .Values.controller.userID }}
          runAsGroup: {{ .Values.controller.groupID }}
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        readinessProbe:
          httpGet:
            path: /healthz
            port: {{ .Values.controller.metrics.port }}
            scheme: HTTP
        {{- if .Values.cluster.profile }}
        {{- if gt (.Values.cluster.profile | int) 2 }}
        resources:
          {{- if eq (.Values.cluster.profile | toString) "3" }}
{{ toYaml .Values.controller.profile.small.resources | indent 10 }}
          {{- else }}
{{ toYaml .Values.controller.resources | indent 10 }}
          {{- end }}
        {{- end }}
        {{- end }}
        livenessProbe:
          httpGet:
            path: /healthz
            port: {{ .Values.controller.metrics.port }}
            scheme: HTTP
          initialDelaySeconds: 10
          timeoutSeconds: 1
        lifecycle:
{{ toYaml .Values.controller.lifecycle | indent 10 }}
        ports:
        - name: http
          containerPort: 80
          protocol: TCP
        - name: https
          containerPort: 443
          protocol: TCP
        {{- if .Values.controller.metrics.enabled }}
        - name: metrics
          containerPort: {{ .Values.controller.metrics.port }}
          protocol: TCP
        {{- end }}
