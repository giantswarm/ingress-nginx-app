apiVersion: v1
kind: Namespace
metadata:
  name: second-ingress-controller
---
apiVersion: v1
kind: Namespace
metadata:
  name: helloworld-2
---
apiVersion: v1
data:
  values: |
    configmap:
      worker-processes: "2"
    controller:
      ingressClass: second-ingress
      autoscaling:
        enabled: false
      service:
        type: NodePort
        nodePorts:
          http: 30012
          https: 30013
    cluster:
      profile: 1
kind: ConfigMap
metadata:
  name: second-ingress-controller-cm
  namespace: second-ingress-controller
---
apiVersion: application.giantswarm.io/v1alpha1
kind: App
metadata:
  labels:
    app-operator.giantswarm.io/version: 0.0.0
  name: second-ingress-controller
  namespace: second-ingress-controller
spec:
  catalog: chartmuseum
  config:
    configMap:
      name: second-ingress-controller-cm
      namespace: second-ingress-controller
  kubeConfig:
    inCluster: true
  name: nginx-ingress-controller-app
  namespace: second-ingress-controller
  version: 0.1.0-overwrittenbypatch

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: helloworld-2
  name: helloworld-2
  namespace: helloworld-2
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: helloworld-2
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: helloworld-2
    spec:
      containers:
      - image: quay.io/giantswarm/helloworld:latest
        imagePullPolicy: Always
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthz
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 3
          periodSeconds: 3
          successThreshold: 1
          timeoutSeconds: 1
        name: helloworld-2
        ports:
        - containerPort: 8080
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthz
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 3
          periodSeconds: 3
          successThreshold: 1
          timeoutSeconds: 1
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext:
        runAsUser: 1000
      terminationGracePeriodSeconds: 30
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: helloworld-2
  name: helloworld-2
  namespace: helloworld-2
spec:
  type: ClusterIP
  ports:
  - port: 8080
    protocol: TCP
    targetPort: 8080
  selector:
    app: helloworld-2
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  labels:
    app: helloworld-2
  name: helloworld-2
  namespace: helloworld-2
spec:
  ingressClassName: second-ingress
  rules:
  - host: helloworld-2
    http:
      paths:
      - backend:
          service:
            name: helloworld-2
            port:
              number: 8080
        path: /
        pathType: Prefix
